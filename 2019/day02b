#!/usr/bin/awk -f

# reset registers
function reset(k) {
	operation = ""
	error = 0
	pc = 0
	for (k = 0; k < memsize; k++)
		mem[k] = bkp[k]
}

# try inputs
function try(noun, verb) {
	mem[1] = noun
	mem[2] = verb
}

# instruction fetch stage
function _if() {
	pc = pc + pcinc
	instruction = mem[pc]
	pcinc = 4
}

# instruction decoding stage
function _id() {
	if (instruction == 1) {
		operation = "ADD"
		wren = 1
	} else if (instruction == 2) {
		operation = "MUL"
		wren = 1
	} else if (instruction == 99) {
		operation = "END"
		wren = 0
	} else {
		operation = instruction
		wren = 0
		error = 1
	}
	operand1 = mem[mem[pc + 1]]
	operand2 = mem[mem[pc + 2]]
	destination = mem[pc + 3]
}

# execution stage
function _ex() {
	if (operation == "ADD")
		writeback = operand1 + operand2
	else if (operation == "MUL")
		writeback = operand1 * operand2
}

# write-back stage
function _wb() {
	if (wren) {
		mem[destination] = writeback
	}
}

# run program
function run() {
	while (operation != "END" && !error) {
		_if()
		_id()
		_ex()
		_wb()
	}
}

# get program output
function output() {
	return mem[0]
}

BEGIN {
	memsize = 0
	RS = ","
	OFS = "\t"
}

{
	bkp[memsize] = mem[memsize] = $1 + 0
	memsize++
}

END {
	for (i = 0; i < 100; i++) {
		for (j = 0; j < 100; j++) {
			try(i, j)
			run()
			if (output() == 19690720) {
				print 100 * i + j
				exit
			}
			reset()
		}
	}
}
